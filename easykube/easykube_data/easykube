#!/bin/bash
WORKDIR="/usr/local/bin/easykube_data"
. $WORKDIR/settings/init.sh
. $WORKDIR/settings/colors.sh
. $WORKDIR/modules/db.sh
. $WORKDIR/modules/pods.sh
. $WORKDIR/modules/expose.sh
#TODO:
#   expose port:
#       pod
#       svc
#       deployment
#   check:
#       make a flow
#   db:
#       restore from dump

###POD STATES###
PODOK=("Running")
PODERR=("CrashLoopBackOff" "Error" "Failed" "ImagePullBackOff" "ErrImagePull" "Unknow")
PODNONE=("Completed" "Terminating" "Init" "Waiting" "Pending" "ContainerCreating")


#TABLEVIEW=$(awk '{printf "%-0s %-5s %-50s %-25s %-5s %-0s\n" ,$1,$2,$3,$4,$5,$6}') #why the fuck it isn't works?..
table6(){
    awk '{printf "%-0s %-5s %-60s %-25s %-5s %-0s\n" ,$1,$2,$3,$4,$5,$6}'
}

table3(){
    awk '{printf "%-0s %-5s %-50s\n" ,$1,$2,$3}'
}

exe(){

    exerun(){
        read -r c
        pod=${exepods[c]}
        container=$(kubectl -n $NS get pod $pod -o=jsonpath={'.spec.containers[0].name'})
        echo ""
        echo -e "${YELLOW}$pod selected${NC}"
        echo ""
        kubectl -n $NS exec -it $pod -c $container -- $cmd
        exit 0
    }
    NS=$2
    #cmd=$3

    exeHelp(){
        echo "kubectl exec"
        echo "Usage: easykube [namespace] [command]"
        exit 1
    }

    if { [[ $2 =~ "help" ]] || [[ -z $3 || -z $2 ]]; }; then
        if [[ -z $2 ]]; then
            echo -e "${RED}Namespace is not defined${NC}"
        fi
        $1Help
    fi

    while [ -n "$3" ]; do
        cmd+=$3" "
        shift
    done

    IFS=" " read -a pods <<< $(echo $(kubectl -n $NS get pods | grep -v "NAME" |  awk '{print $1"@"$3}'))

    echo "List of pods:"
    a=0            
    for (( i=0; i<${#pods[@]}; i++ )); do

            pod=$(echo ${pods[i]} | cut -d"@" -f1)
            podstate=$(echo ${pods[i]} | cut -d"@" -f2)

            if [[ "${PODOK[*]}" =~ "${podstate}" ]]; then
                echo -e "   ${GREEN} [$a]: $pod${NC}" | table3
                ((a++))
                exepods+=($pod)
            elif [[ "${PODNONE[*]}" =~ "${podstate}"  ]]; then
                echo -e "   ${GRAY} [-]: $pod${NC}" | table3
            else
                echo -e "   ${RED} [-]: $pod${NC}" | table3
            fi
    done

    if [[ -z $exepods ]]; then
        echo -e "\nNo pods available" && exit 1
    elif [[ ${#exepods[@]} -eq 1 ]]; then
        exerun
    else
        echo -e "\nSelect number: \c"
        exerun
    fi


}

context(){

    default(){
        if [[ -z $2 ]]; then
            kubectl config get-contexts | grep "*"
        else
            kubectl config use-context $2
        fi
    }

    selectContext(){
        IFS=" " read -a contexts <<< $(echo $(kubectl config get-contexts --no-headers | awk '{print $1}' | grep -v "*"))
        for (( i=0; i<${#contexts[@]}; i++ )); do
            echo "[$i] ${contexts[i]}" | table3
        done
    }

    case $2 in
        select) selectContext;;
        *) default;;
    esac

}

portForward(){
    NS=$1
    selectedIp=""
    selectIp(){
        IFS=" " read -a ips <<< $(echo $(ifconfig | grep inet | awk '{print $2}'))
        i=0
        while [[ $i -lt ${#ips[@]} ]]; do
            echo -e "   ${GREEN} [$i]: ${ips[i]}${NC}" | table3
            ip+=(${ips[i]})
            ((i++))
        done
        echo -e "\nSelect IP that will used for forwarding: \c"
        read -r c
        selectedIp=${ip[c]}
        echo ""
        echo -e "${YELLOW}$selectedIp selected${NC}"
    }

    runpf(){
        if [[ $portTo ]]; then
            ports="$portTo:$port"
        else
            ports=$port
        fi

        if [[ ! -z $selectedIp ]]; then
            ip="--address=$selectedIp"
        fi

        echo -e "\nSelect number: \c"
        read -r c
        forwardFrom=${svcforward[c]}
        port=${portForward[c]}
        echo ""
        echo -e "${YELLOW}$forwardFrom selected${NC}"

        kubectl -n $NS port-forward $kind/$forwardFrom $ports $ip
    }

    svcKind(){
        a=0
        IFS=" " read -a svcs <<< $(echo $(kubectl -n $NS get svc | awk '{print $1"@"$5}' | cut -d/ -f1 | grep -v NAME))
        while [[ $a -lt ${#svcs[@]} ]]; do
            svc=$(echo ${svcs[a]} | cut -d@ -f1)
            port=$(echo ${svcs[a]} | cut -d@ -f2)
            echo -e "   ${GREEN} [$a]: $svc${NC}" | table3
            ((a++))
            svcforward+=($svc)
            portForward+=($port)
        done
        runpf

    }

    podKind(){
        echo -e  "${BLUE}Under Cunstruction${NC}"
        exit 1
        a=0
        IFS=" " read -a svcs <<< $(echo $(kubectl -n $NS get svc | awk '{print $1"@"$5}' | cut -d/ -f1 | grep -v NAME))
        while [[ $a -lt ${#svcs[@]} ]]; do
            svc=$(echo ${svcs[a]} | cut -d@ -f1)
            port=$(echo ${svcs[a]} | cut -d@ -f2)
            echo -e "   ${GREEN} [$a]: $svc${NC}" | table3
            ((a++))
            svcforward+=($svc)
            portForward+=($port)
        done
        runpf
    }

    exposeHelp(){
        echo "kubectl port-forward"
        echo "Usage: easykube [namespace] [kind] [destinationPort] [ip]"
        exit 0
    }


    rport="^(1|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
    rip="^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$"


    while [ -n "$3" ]; do
        case $3 in
            rport) portTo=$3
            shift
            ;;
            --select-ip) selectIp
            break
            ;;
            rip) selectedIp=$3
            shift
            ;;
        esac
        shift
    done

    echo "selected port: $portTo" 

    case $1 in
        svc|s) kind=svc; svcKind
        ;;
        help|h) exposeHelp
        ;;
        pod|p|*) pod=svc; podKind
        ;;
    esac



}

thisHelp(){
    echo "Easykube."
    echo "Usage: easykube [option] [arguments]"
    echo "List of options:"
    echo "  db"
    echo "  exe"
    echo "  check, c"
    echo "  logs, l"
    # echo "  expose, e"
    echo "  help, h"
    echo "  version, v"
}

version(){
    echo "easykube 1.1b"
}

if { [[ $(kubectl config current-context) =~ "prod" ]] && [[ $1 != "context" ]]; }; then
    echo -e "${RED}ATTENTION"
    echo "PRODUCTION KUBECONFIG IS IN USE"
    echo -e "PLEASE BE CAREFULL${NC}\n"
else 
    echo -e "${GREEN}CURRENT CONTEXT: $(kubectl config get-contexts | grep -v "CURRENT" | grep "*" | awk '{print $2}')${NS}"
fi

while [ -n "$1" ]; do
    case $1 in
        db) dbPass $1 $2 $3 $4 #option, ns, next call
        break ;;
        exe|exec|e) exe $1 $2 $3 #option, ns command
        break ;;
        check | c) checkPods "check" $2 $3 $4
        break ;;
        logs | l) podLogs "logs" $2 #option, ns
        break ;;
        context) context $1 $2
        break ;;
        portForward | port-forward | pf | p) portForward $2 $3 $4 $5 $6 #ns, kind, portTo, ip, flag --select-ip
        break ;;
        version | v) version
        break ;;
        *) thisHelp
        break ;;
    esac
done
